#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass paper
\begin_preamble
\usepackage{graphics}
\usepackage{graphicx}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 2
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Advanced Systems Lab
\end_layout

\begin_layout SubTitle
Milestone 1 Report
\end_layout

\begin_layout Author
Karolos Antoniadis
\end_layout

\begin_layout Standard
This is the report of the first milestone of 
\begin_inset Quotes eld
\end_inset

Advanced System Lab
\begin_inset Quotes erd
\end_inset

 project.
 The report starts with an introduction of the system created for this milestone.
 Afterwards, in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:systemdesign"

\end_inset

 we describe the general design of the system, including the database, the
 middleware and the clients.
 In Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:testing"

\end_inset

 we describe how we tested the system.
 We follow with a description of the experimental setup and how the experiments
 were conducted in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:experimentalsetup"

\end_inset

.
 In Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:experiments"

\end_inset

 we continue by describing the experiments that were done and their evaluation.
 We conclude the report in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:conclusion"

\end_inset

.
\end_layout

\begin_layout Section
Introduction
\begin_inset CommandInset label
LatexCommand label
name "sec:introduction"

\end_inset


\end_layout

\begin_layout Standard
Goal of this milestone was to create a message passing system supporting
 persistent queues and a simple message format.
 Furthermore to experimentally evaluate it and determine its performance
 characteristics.
 The desired message passing system consists of three tiers.
 The first one implements the persistent queues using a database, which
 from now on will be referred as the 
\begin_inset Quotes eld
\end_inset

database tier
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

database
\begin_inset Quotes erd
\end_inset

 (db).
 The second tier implements the messaging system and is responsible of all
 the logic related to system management, also it is the one tier that is
 using the database in order to implement its functionality.
 We will refer to this tier as the 
\begin_inset Quotes eld
\end_inset

middleware tier
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

middleware
\begin_inset Quotes erd
\end_inset

 (mw).
 Finally, the third tier that implements the clients that send and receive
 messages using the middleware, this tier is going to be referred to as
 
\begin_inset Quotes eld
\end_inset

clients tier
\begin_inset Quotes erd
\end_inset

 or simply 
\begin_inset Quotes eld
\end_inset

clients
\begin_inset Quotes erd
\end_inset

.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "tiers"

\end_inset

 depicts the three tiers and they way they are connected to each other.
 As can been seen in the figure there is only one database while there can
 be more than one middlewares that are identical to each other and are connected
 to the database, as well as many clients connecting to different middlewares.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/tiers.png
	lyxscale 20
	scale 25

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
The Three Tiers
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "tiers"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
System Design
\begin_inset CommandInset label
LatexCommand label
name "sec:systemdesign"

\end_inset


\end_layout

\begin_layout Standard
In this section we describe the design of our system.
 We start by describing the code structure of our implementation and its
 main interface and aftewards we look more thoroughly at every tier and
 how its functionality was implemented.
\end_layout

\begin_layout Subsection*
Code Structure and Interfaces Overview
\end_layout

\begin_layout Standard
All the code for the client and the middleware was implemented in subpackages
 of 
\shape italic
ch.ethz.inf.asl
\shape default
.
 The package structure can be seen in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "packages"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
ch.ethz.inf.asl
\end_layout

\begin_layout Plain Layout
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "99text%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
client :: contains classes related to client code
\end_layout

\begin_layout Plain Layout
common :: package containing common classes to be used by both the clients
 and the middleware
\end_layout

\begin_layout Plain Layout
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "99text%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
request :: contains all the possible request classes and the 
\shape italic
Request
\shape default
 abstract class
\end_layout

\begin_layout Plain Layout
response :: contains all the possible response classes and the
\shape italic
 Response
\shape default
 abstract class
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
console :: containts the management console code
\end_layout

\begin_layout Plain Layout
exceptions :: contains relevant exceptions used by the application
\end_layout

\begin_layout Plain Layout
logger :: contains the 
\shape italic
Logger
\shape default
 class used for instrumenting the system
\end_layout

\begin_layout Plain Layout
main :: contains the Main class that is used to start the clients and the
 middleware
\end_layout

\begin_layout Plain Layout
middleware :: package containing classes related to the middleware
\end_layout

\begin_layout Plain Layout
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "99text%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
pool :: package containing pool implementations
\end_layout

\begin_layout Plain Layout
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "99text%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
connection :: contains the implementation of a connection pool
\end_layout

\begin_layout Plain Layout
thread :: contains the implementation of a thread pool
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
utils :: contains general utility methods for the application
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Package Structure
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "packages"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
While designing the system we came to the realization that the communication
 protocol, meaning the messages that are being sent, for example send message,
 receive message etc.
 are the same between the clients and the middleware and bewteen the middleware
 and the database.
 They are the same in the sense that when a client wants to send a message
 he has to issue some kind of send message request to the middleware.
 Similarly when the middleware wants to serve a send message request or
 the client he can issue a send message to the database.
 Because of this we created the interface that can be seen in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "protocol"

\end_inset

.
 This interface can be found in the 
\shape italic
MessagingProtocol
\shape default
 interface and is implemented by both 
\shape italic
ClientMessagingProtocolImpl
\shape default
 and 
\shape italic
MiddlewareMessagingProtocolImpl
\shape default
 classes.
 The difference between the two implementations is that in the client implementa
tion when for example 
\shape italic
sendMessage(...)
\shape default
 is called an underlying connection is used to a send a message from the
 client to the middleware that informs the middleware of the desire of the
 client to send a message.
 While on the other hand when the middleware calls 
\shape italic
sendMessage(...)
\shape default
 the middleware is calling a stored function from the database to actually
 
\begin_inset Quotes eld
\end_inset

save
\begin_inset Quotes erd
\end_inset

 the message in the database.
 More on how this interface waas implemented by the client and the middleware
 is given in their corresponding subsections.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\shape italic
int sayHello(String clientName);
\end_layout

\begin_layout Plain Layout

\shape italic
void sayGoodbye();
\end_layout

\begin_layout Plain Layout

\shape italic
int createQueue(String queueName);
\end_layout

\begin_layout Plain Layout

\shape italic
void deleteQueue(int queueId);
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\shape italic
void sendMessage(int queueId, String content);
\end_layout

\begin_layout Plain Layout

\shape italic
void sendMessage(int receiverId, int queueId, String content);
\end_layout

\begin_layout Plain Layout

\shape italic
Optional<Message> receiveMessage(int queueId, boolean retrieveByArrivalTime);
\end_layout

\begin_layout Plain Layout

\shape italic
Optional<Message> receiveMessage(int senderId, int queueId, boolean retrieveByAr
rivalTime);
\end_layout

\begin_layout Plain Layout

\shape italic
Optional<Message> readMessage(int queueId, boolean retrieveByArrivalTime);
\end_layout

\begin_layout Plain Layout

\shape italic
int[] listQueues();
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Messaging Protocol Interface
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "protocol"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Database
\end_layout

\begin_layout Standard
The PostgreSQL database management system was used, specifically PostgreSQL
 (release 9.3.5).
 It was need for the system to persistent store information so a database
 was used to store the needed information for the clients, the queues and
 the messages.
 For this reason three tables were created as can been seen in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "tables"

\end_inset

 with their fields and their respective SQL types.
 As can been seen in this figure the fields 
\shape italic
sender_id
\shape default
,
\shape italic
 receiver_id 
\shape default
and
\shape italic
 queue_id 
\shape default
are all foreign keys of the
\shape italic
 message 
\shape default
table.
 The first two are associated with the
\shape italic
 id 
\shape default
of the 
\shape italic
client 
\shape default
table, while
\shape italic
 queue_id
\shape default
 is connected to the
\shape italic
 id 
\shape default
of the
\shape italic
 queue 
\shape default
table.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center

\shape italic
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="1">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
client
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
id
\series default
 serial primary key
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
name 
\series default
varchar(20) NOT NULL
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
hspace{0.5cm}
\end_layout

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="1">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
queue
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
id
\series default
 serial primary key
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
name
\series default
 varchar(20) NOT NULL
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
vspace{0.5cm}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\align center

\shape italic
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="1">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\shape italic
message
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
id
\series default
 serial primary key
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
sender_id
\series default
 integer REFERENCES client(
\series bold
id
\series default
) NOT NULL
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
receiver_id
\series default
 integer REFERENCES client(
\series bold
id
\series default
)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
queue_id
\series default
 integer REFERENCES queue(
\series bold
id
\series default
) NOT NULL
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
arrival_time
\series default
 timestamp NOT NULL
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
\shape italic
message
\series default
 text NOT NULL
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Tables
\begin_inset CommandInset label
LatexCommand label
name "tables"

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
As can be seen all of the fields except the 
\shape italic
receiver_id
\shape default
 of the 
\shape italic
message
\shape default
 table cannot contain the 
\shape italic
NULL
\shape default
 value.
 This was a deliberate choice since it is possible for a message to be sent
 with no particular receiver in mind and such a message could possibly be
 received by any other client (except the client that sent the message).
 In such a case, i.e.
 a message has no specific receiver, the 
\shape italic
receiver_id 
\shape default
contains the 
\shape italic
NULL
\shape default
 value.
\end_layout

\begin_layout Standard
The 
\shape italic
message
\shape default
 table has also two check constraints associated with it.
 Those constraints are: 
\end_layout

\begin_layout Enumerate

\shape italic
CONSTRAINT check_length CHECK (LENGTH(message) <= 2000)
\end_layout

\begin_layout Enumerate

\shape italic
CONSTRAINT check_cannot_send_to_itself CHECK (sender_id != receiver_id)
\end_layout

\begin_layout Standard
The 
\shape italic
check_length
\shape default
 constraint checks that a message cannot contain a message with too much
 content, in this case one with more than 2000 characters.
 (TODO talk about text vs varchar) The second constraint was added because
 it was considered meaningless for a client to send a message to himself.
 It is also considered meaningless for a client to receive a message he
 sent (in case the 
\shape italic
receiver_id
\shape default
 is 
\shape italic
NULL
\shape default
), this is also checked in the stored function and is explained later on.
\end_layout

\begin_layout Standard
In order to increase the performance of the database, indexes were used.
 PostgreSQL creates by default indexes on the primary keys
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

Adding a primary key will automatically create a unique btree index on the
 column or group of columns used in the primary key.
\begin_inset Quotes erd
\end_inset

 (http://www.postgresql.org/docs/9.3/static/ddl-constraints.html)
\end_layout

\end_inset

.
 The extra indexes that were introduced are the following: 
\end_layout

\begin_layout Enumerate

\shape italic
CREATE INDEX ON message (receiver_id, queue_id)
\end_layout

\begin_layout Enumerate

\shape italic
CREATE INDEX ON message (sender_id)
\end_layout

\begin_layout Enumerate

\shape italic
CREATE INDEX ON message (arrival_time)
\end_layout

\begin_layout Standard
The first index was introduced to make faster the retrieval of message since
 most of them are based on a 
\shape italic
receiver_id 
\shape default
and on a 
\shape italic
queue_id
\shape default
.
 Note that the field 
\shape italic
receiver_id
\shape default
 appears first on this multicolumn index, this was not a random choice since
 it is known
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

...but the index is most efficient when there are constraints on the leading
 (leftmost) columns.
\begin_inset Quotes erd
\end_inset

 (http://www.postgresql.org/docs/9.3/static/indexes-multicolumn.html)
\end_layout

\end_inset

 that the in a multicolumn index the leftmost column can also be efficiently
 used solo.
 The case where 
\shape italic
receiver_id
\shape default
 is used alone and not in combination with 
\shape italic
queue_id
\shape default
 is the listing queues query that lists the queues where a message for a
 client exists.
 The second index was created to speed up receiving of messages from a specific
 sender.
 The third index was introduced since some of the receiving messages functions
 receive messages based on the arrrival time.
 
\end_layout

\begin_layout Standard
Code for the creation of the tables and the indexes can be found in the
 
\family typewriter
auxiliary_functions.sql
\family default
 file in 
\family typewriter
src/main/resources
\family default
.
\end_layout

\begin_layout Subsubsection*
Stored Functions
\end_layout

\begin_layout Standard
Stored functions were created using the PL/pgSQL procedural language to
 reduce the network communication time between the middleware and the database.
 Also stored functions have the advantage that they are compiled already
 by the DBMS and their query plan has been generated so they can be reused
 and therefore increa
\emph on
se
\emph default
 performance.
 The code for the stored functions can be found in 
\family typewriter
read_committed_basic_functions.sql
\family default
 file in 
\family typewriter
src/main/resources
\family default
 and all of them are used to be able to implement the interface shown in
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "protocol"

\end_inset

.
\end_layout

\begin_layout Standard
The stored functions 
\shape italic
read_message
\shape default
 and 
\shape italic
receive_message
\shape default
 specifically check that if a message has no receiver it is not being returned
 to the client that sent it since this cannot be catched by the 
\shape italic
check_cannot_send_to_itself
\shape default
 constraint because in those cases the 
\shape italic
receiver_id
\shape default
 is 
\shape italic
NULL
\shape default
.
\end_layout

\begin_layout Standard
Stored functions were not used everywhere, only where it made sense.
 For example in cases where the same SQL queries did not need to be executed
 many times, simple queries were sent to the database instead, e.g.
 management console.
\end_layout

\begin_layout Subsubsection*
Transactions and Isolation Levels
\end_layout

\begin_layout Standard
In this subsection we discuss isolation levels and why they are important
 for the correctness of our system.
 In order to do so let us see a simplified version of the internals of the
 
\shape italic
receive_message
\shape default
 stored function, seen in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "receiveMessage"

\end_inset

, that takes two parameters, the 
\shape italic
p_requesting_user_id
\shape default
 and the 
\shape italic
p_queue_id
\shape default
 and is trying to find a message for the requesting user in the given queue.
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center

\shape italic
\begin_inset Box Boxed
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status collapsed

\begin_layout Plain Layout

\shape italic
SELECT id INTO received_message_id FROM message WHERE queue_id = p_queue_id
 AND receiver_id = p_requesting_user_id LIMIT 1;
\end_layout

\begin_layout Plain Layout

\shape italic
RETURN QUERY SELECT * FROM message WHERE id = received_message_id;
\end_layout

\begin_layout Plain Layout

\shape italic
DELETE FROM message where id = received_message_id; 
\end_layout

\end_inset


\shape default

\begin_inset Caption Standard

\begin_layout Plain Layout
Simplified Version of 
\shape italic
receive_message
\shape default
 Body 
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "receiveMessage"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Functions in PostgreSQL are executed within transactions
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

Functions and trigger procedures are always executed within a transaction
 established by an outer query
\begin_inset Quotes erd
\end_inset

 (http://www.postgresql.org/docs/current/interactive/plpgsql-structure.html)
\end_layout

\end_inset

.
 Transactions are known to be atomic, in the sense that they either 
\begin_inset Quotes eld
\end_inset

happen
\begin_inset Quotes erd
\end_inset

 completely, i.e.
 all their effects take place, or not at all.
 But still problems could arise! The default isolation level in PostgreSQL
 is READ COMMITTED
\begin_inset Foot
status open

\begin_layout Plain Layout
http://www.postgresql.org/docs/9.3/static/transaction-iso.html
\begin_inset CommandInset label
LatexCommand label
name "fn:transactionsLink"

\end_inset


\end_layout

\end_inset

 which roughly states 
\begin_inset Quotes eld
\end_inset

...a SELECT query (without a FOR UPDATE/SHARE clause) sees only data committed
 before the query began; it never sees either uncommitted data or changes
 committed during query execution by concurrent transactions.
\begin_inset Quotes erd
\end_inset


\begin_inset script superscript

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand ref
reference "fn:transactionsLink"

\end_inset


\end_layout

\end_inset

.
 So with such an isolation level it is possible for two concurrent transactions
 to read the exact same message, only one of them will delete it, but both
 of them will return it.
 This of course is not acceptable since we want a message to be read by
 only one client.
 In order to solve this problem there are at least two approaches:
\end_layout

\begin_layout Enumerate
Use 
\shape italic
FOR UPDATE
\shape default

\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset Quotes eld
\end_inset

FOR UPDATE causes the rows retrieved by the SELECT statement to be locked
 as though for update.
 This prevents them from being modified or deleted by other transactions
 until the current transaction ends.
\begin_inset Quotes eld
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

That is, other transactions that attempt UPDATE, DELETE, SELECT FOR UPDATE,
 SELECT FOR NO KEY UPDATE, SELECT FOR SHARE or SELECT FOR KEY SHARE of these
 rows will be blocked until the current transaction ends.
 
\begin_inset Quotes eld
\end_inset

 (http://www.postgresql.org/docs/9.3/static/sql-select.html#SQL-FOR-UPDATE-SHARE)
\begin_inset CommandInset label
LatexCommand label
name "fn:FOR-UPDATE-causes"

\end_inset


\end_layout

\end_inset

and therefore prevent other transactions from selecting the same message.
\end_layout

\begin_layout Enumerate
Change isolation level to 
\shape italic
REPEATABLE READ
\shape default
 which is stronger than 
\shape italic
READ COMMITTED
\shape default
 and roughly states  
\begin_inset Quotes eld
\end_inset

This level is different from Read Committed in that a query in a repeatable
 read transaction sees a snapshot as of the start of the transaction, not
 as of the start of the current query within the transaction.
\begin_inset Quotes erd
\end_inset


\begin_inset script superscript

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand ref
reference "fn:transactionsLink"

\end_inset


\end_layout

\end_inset

.
 In case another transaction deletes the message in the meantime the transaction
s is going to fail by giving back an error.
 
\end_layout

\begin_layout Standard
The 
\begin_inset Quotes eld
\end_inset

problem
\begin_inset Quotes erd
\end_inset

 with the second approach is that a transaction could find concurrent update
 errors and will have to be re-executed: 
\begin_inset Quotes eld
\end_inset

...it should abort the current transaction and retry the whole transaction
 from the beginning.
\begin_inset Quotes erd
\end_inset


\begin_inset script superscript

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand ref
reference "fn:transactionsLink"

\end_inset


\end_layout

\end_inset

.
 For the above reasons we used the first approach since it made our application
 code easier, i.e.
 not having to repeat a transaction.
\end_layout

\begin_layout Standard
We have to mention here that the 
\shape italic
SELECT
\shape default
 command combined with 
\shape italic
FOR UPDATE
\shape default
 and 
\shape italic
ORDER BY
\shape default
 could have some problems: 
\begin_inset Quotes eld
\end_inset

It is possible for a SELECT command running at the READ COMMITTED transaction
 isolation level and using 
\shape italic
ORDER BY
\shape default
 and a locking clause to return rows out of order.
\begin_inset Quotes erd
\end_inset


\begin_inset script superscript

\begin_layout Plain Layout
\begin_inset CommandInset ref
LatexCommand ref
reference "fn:FOR-UPDATE-causes"

\end_inset


\end_layout

\end_inset

.
 This is because ordering of the rows occurs before locking them, so it
 is possible that when the rows are locked some columns might have been
 modified.
 This is not a problem in our implementation since we delete the selected
 row.
\end_layout

\begin_layout Subsubsection*
Connecting Java and PostgreSQL
\end_layout

\begin_layout Standard
For the connection between Java and the database the JDBC41 PostgreSQL driver
\begin_inset Foot
status open

\begin_layout Plain Layout
http://jdbc.postgresql.org/download.html
\end_layout

\end_inset

 was used.
\end_layout

\begin_layout Subsubsection*
What is being logged?
\end_layout

\begin_layout Standard
The only thingthat is being logged in the database while it is being used
 ithe the CPU, network and memory utilization using the dstat
\begin_inset Foot
status open

\begin_layout Plain Layout
http://dag.wiee.rs/home-made/dstat/
\end_layout

\end_inset

 tool.
\end_layout

\begin_layout Subsubsection*
Management Console
\end_layout

\begin_layout Standard
A management console was also created (it is implemented in the 
\shape italic
Manager
\shape default
 class under the 
\shape italic
console
\shape default
 package) to easily check the contents of a database in a remote machine.
 The console is a GUI application and can be seen Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "management"

\end_inset

.
 The user of the console just has to provide the host address and port number
 of where the database is running, as well as the username, password and
 database name.
 Then by clicking 
\begin_inset Quotes eld
\end_inset

Login
\begin_inset Quotes erd
\end_inset

 and the appropriate 
\begin_inset Quotes eld
\end_inset

Refresh
\begin_inset Quotes erd
\end_inset

 buttons he can check the current data of the client, queue or message table.
 For retrieving the data from the database simple 
\begin_inset Quotes erd
\end_inset


\shape italic
SELECT * FROM ...
\shape default

\begin_inset Quotes eld
\end_inset

 queries were issued on the database, no stored functions were created for
 this since they are only used for the console and quite sparingly.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/management.png
	scale 40

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Management Console Screenshot
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "management"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Middleware
\end_layout

\begin_layout Standard
The middleware implements the messaging system, it receives requests/messages
 from clients and has to use the database in order to persist those messagess,
 as well as retrieve the messages from the database to return to the clients.
 Obviously if we want to be able to support more than one client the middleware
 needs to be multi-threaded.
 The interface that the middleware has to implement can be seen in Figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "protocol"

\end_inset

.
\end_layout

\begin_layout Standard
Our middleware follows a non-blocking approach using simple Java IO.
 This seems hard to believe at first but nevertheless this is the case as
 will be explained later on.
 But before doing so, let us see some of the possible approaches that can
 be used to implement a middleware.
\end_layout

\begin_layout Itemize
In this approach the middleware would have some threads, also known as worker
 threads, on the middleware and every one of them waits for a connection
 from the client.
 When a connection is established the thread blocks and waits for a request
 from the client.
 When it receives the request it, it executes the request meaning it issues
 the corresponding operations to the database and then returns the response
 back to the client.
 Afterwards it closes the connection and waits for the next client connection.
 Although this approach can support an arbitrary number of client it is
 quite wasteful and slow since for every request-response interaction the
 client has to establish a connection with the middleware.
 
\end_layout

\begin_layout Itemize
With this approach we have a worker thread for every client.
 A worker thread is created when a client connects and then it is used for
 this client until the end.
 The advantage of this approach in constrast to the previous is that there
 does not have to be an establishment of a connection for every request
 between the client and the middleware.
 But this solution seems to have scalability issues since the number of
 clients the middleware could possibly support is bounded by the number
 of threads the system can support.
 
\end_layout

\begin_layout Itemize
This approach uses Java New IO.
 The rough idea is having a thread, called selector thread, that blocks
 until a new connection from a clien is established or data from some already
 established connection are received.
 When data from a connection are received the reading of the data can be
 passed to a worker thread that is going to do the actual reading and the
 one that is going to send the response back to the client.
 This solution has none of the above problems.
\end_layout

\begin_layout Standard
Our approach followed a different way.
 Its main idea is to have a queue of sockets corresponding to connections
 from the clients.
 Everytime a client connects to the middleware the socket is being added
 to this queue.
 Then there are also some worker threads operating in a round-robin approach
 on this queue and check if there is something to read from the underlying
 input stream of the socket.
 If yes they read the data, use the database to perform their operation
 and send the response back to the client.
 This approach has none of the problems described in the first two approaches.
 Our implementation of this approach is non-blocking since a worker thread
 never blocks to wait for data from a specific connection, if there are
 no data in a connection it just puts the connection back to the queue and
 continues with the next connection.
 The non-blocking implemenation was achieved by using 
\shape italic
InputStream
\shape default
's 
\shape italic
available()
\shape default
 method that can return the number of bytes that can be read whithout blocking.
 
\shape italic
available()
\shape default
 is of course a non-blocking method which means a worker thread issues a
 blocking 
\shape italic
read()
\shape default
 method call only when 
\shape italic
available()
\shape default
 showed that a number of bytes can be read without blocking.
 In Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "middlewareArchitecture"

\end_inset

 we can see the architecture of our middleware.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/overviewOfRequest.png
	lyxscale 15
	scale 40

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Middleware Architecture
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "middlewareArchitecture"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection*
Overview of a request being served
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename images/workerThread.png
	lyxscale 30
	scale 50

\end_inset


\end_layout

\begin_layout Standard
MENTION that serializtion is used
\end_layout

\begin_layout Standard
In the following figure we can see how the implementation of the MessagingProtoc
ol are used by both the client and the middleware to server their purposes.
\end_layout

\begin_layout Standard
General overview on how a 
\end_layout

\begin_layout Subsubsection*
Why are we having one Request/Response class per request/response?
\end_layout

\begin_layout Standard
It might seem weird having one request and one response class for every
 possible request and response.
 But this was done to make the code more extensible if needed to add new
 requests and for simplifying the work of the middleware.
 As can been seen the Request class contains the abstract execute method
 that receives as a parameter a MessagingProtocol implementation.
 Now when the middleware receives a request, after deserializing it it can
 just do `request.execute(...)` and it knows that the correct execute method
 is going to be called.
 For example `SendMessageRequest` implements execute as following.
 Therefore by taking advantage of polymorphism the Middleware doesn't need
 a long and error-prone list of if-else like this `if request is SendMessage
 do this ...
 else if ...
 `.
 
\end_layout

\begin_layout Standard
In order to create one more request for the system, the method has to be
 inserted in the MessagingProtocol and then implement it in ClientMessagingProto
colImpl and MiddlewareMessagingProtocolImpl and the correct REquest - Response
 classes to be implemented and that is it.
 There is no need to go around and introduce one more enum value or put
 one more `else-if` at some part of the code.
\end_layout

\begin_layout Subsubsection*
Where do requests get queued up?
\end_layout

\begin_layout Standard
FIFO FIFO FIFO
\end_layout

\begin_layout Subsubsection*
What is being logged?
\end_layout

\begin_layout Standard
DB request and the type of the request
\end_layout

\begin_layout Subsubsection*
Starting the Middleware
\end_layout

\begin_layout Standard
Many identical middlewares can be started
\end_layout

\begin_layout Standard
TAK ABOUT Implementing thread pool and connection pool bymyselfss
\end_layout

\begin_layout Subsubsection*
Stopping the Middleware
\end_layout

\begin_layout Standard
GRACEFUL termination
\end_layout

\begin_layout Subsection*
Clients
\end_layout

\begin_layout Standard
Every client is being executed as a thread (of
\shape italic
 ClientRunnable
\shape default
).
 
\end_layout

\begin_layout Standard
As was said in the previous section, clients use the `MessagingProtocol`
 .
 Clients block when waiting for a response from teh middleware.
 How do they clients operate?
\end_layout

\begin_layout Standard
How do check the system is correct?
\end_layout

\begin_layout Standard
Talk about graceful termination
\end_layout

\begin_layout Subsubsection*
What is being logged? 
\end_layout

\begin_layout Subsubsection*
Starting the Clients
\end_layout

\begin_layout Subsection*
General Remarks 
\end_layout

\begin_layout Standard
Initially we were planning to test our system using the Dryad cluster which
 has Java 7 installed.
 For this reason wes re-implemented part of the 
\shape italic
Optional
\shape default
 class found in Java 8.
 Also almost everywhere the try-with-resources, a feature that appeared
 in Java 7, is being used so we can be assured that the respective 
\shape italic
close()
\shape default
 method is called.
\end_layout

\begin_layout Section
Testing
\begin_inset CommandInset label
LatexCommand label
name "sec:testing"

\end_inset


\end_layout

\begin_layout Standard
Correctness of our system was of foremost importance, therefore testing
 played an important role while developing the system.
 The system has been tested exhaustively (TODO) with unit tests.
 Although testing the system took its fair amount of time we do believe
 it was worth it since it helped us find bugs while still working locally
 with the system that if they appeared when running experiments would be
 more hard to locate.
 For testing the TestNG
\begin_inset Foot
status open

\begin_layout Plain Layout
http://testng.org
\end_layout

\end_inset

 testing framework was used and also the Mockito
\begin_inset Foot
status open

\begin_layout Plain Layout
https://github.com/mockito/mockito
\end_layout

\end_inset

 framework was used for mocking.
 TestNG is similar to JUnit while Mockito allows the developer to easily
 and fast mock objects that would be quite expensive to construct.
 For example, the configuration files were mocked in the end-to-end tests
 using Mockito.
\end_layout

\begin_layout Standard
All the tests are located in the 
\family typewriter
src/test
\family default
 directory under the package 
\shape italic
ch.ethz.inf.asl
\shape default
.
 With the exceptions of the 
\shape italic
endtoend
\shape default
 and 
\shape italic
testutils
\shape default
 packages, all the other packages are the same as with the non-test code
 packages and under them the corresponding tests can be found.
 The tests that belong to the 
\shape italic
DATABASE
\shape default
 and 
\shape italic
END_TO_END
\shape default
 groups, defined in 
\shape italic
TestConstants
\shape default
 class in the 
\shape italic
testutils
\shape default
 package, are using the local database which is being accessed by the constants
 given in the same file.
\end_layout

\begin_layout Subsection*
Stored Functions
\end_layout

\begin_layout Standard
Since the stored functions are in some sense the core of our system, they
 have been tested thoughroughly.
 
\end_layout

\begin_layout Standard
The first tests can be found in 
\shape italic
SQLFunctionsDatabaseTest
\shape default
 class and actually check that the stored functions actually do what they
 are supposed to do.
 For testing this the database is populated with some fake data taken from
 the file 
\family typewriter
src/test/resouces/populate_database.sql
\family default
 and the stored functions are applied to this database, after the stored
 functions are applied we verify the expected results.
\end_layout

\begin_layout Standard
The second tests can be found in 
\shape italic
SQLFunctionsConcurrentCallsDatabaseTest
\shape default
 class and they check that with the given isolation levels as explained
 in the previous section, the stored functions still operate correctly.
 This test actually creates many concurrent readers that issue receive message
 requests and at the end it is verified that no message was read more than
 once and that all messages were read.
\end_layout

\begin_layout Subsection*
End-to-End Tests
\end_layout

\begin_layout Standard
There are two end-to-end tests for our system.
 Both of them exist under the 
\shape italic
endtoend
\shape default
 package.
 The first one exists in 
\shape italic
EndToEnd
\shape default
 class while the other one in 
\shape italic
EndToEndWithMessages
\shape default
.
\end_layout

\begin_layout Subsubsection*
EndToEnd
\end_layout

\begin_layout Standard
This test is as close as possible to how the system is being executed and
 uses the 
\shape italic
Client
\shape default
 and 
\shape italic
Middleware
\shape default
 classes.
 It creates two middlewares and 4 clients all running on the local machine.
 In this scenario there are 2 clients connected to each middleware.
 The clients are being executed for 20 seconds and they communicate with
 each other by sending and receiving messages.
 At the end of their execution it is verified that number of requests sent
 by the clients were actually received by the middleware and no more.
 And that the number of reponses sent from the middlewares were actually
 received by the clients.
 In order to check the requests and responses that were being sent and received
 we had to inject some end-to-end testing code in the normal non-testing
 code, e.g.
 method 
\shape italic
getAllRequests
\shape default
 in the 
\shape italic
Middleware
\shape default
 class.
 This was done halfheartedly since it confuses tests with the code, but
 at the end this test was useful since after every change in the system
 by running this test we could be assured that everything was still in place.
\end_layout

\begin_layout Subsubsection*
EndToEndWithMessages
\end_layout

\begin_layout Standard
This test uses one middleware and 2 clients that send and receive specific
 messages with each other.
 It is verified that every client actually receives the messages sent by
 the other and with the expected content.
\end_layout

\begin_layout Subsection*
Encountered Bugs
\end_layout

\begin_layout Standard
Verification errors while debugging ..
 forgotten notNull Found the InstantiationException in the newInstance()
 thing.
 Because I had requests with not a nullable Constructor.
 (This was found while mocking to get the messages with failed response).
\end_layout

\begin_layout Standard
While writing the endtoend test I realized I was immediately closing the
 connection to the clent from the middlware when the client was saying goodbye
 so the user was waiting forever for a response from the middleware.
 I though it was the middleware that wasn't finishing in the test so I Started
 making all the thread daemon threads to see what will happen.
 Found bugs in equals methods ...
 
\end_layout

\begin_layout Subsection*
General Encountered Problems
\end_layout

\begin_layout Standard
Problems that werent bugs
\end_layout

\begin_layout Standard
When running experiment increase number of message I got the following error
 from the client logs:
\end_layout

\begin_layout Standard
ch.ethz.inf.asl.exceptions.MessagingProtocolException: failed to send messageERROR:
 could not extend file "base/16389/16427.6": No space left on device Hint:
 Check free disk space.
 Where: SQL statement "INSERT INTO message (sender_id, receiver_id, queue_id,
 arrival_time, message) VALUES (p_sender_id, p_receiver_id, p_queue_id,
 p_arrival_time, p_message)" PL/pgSQL function send_message(integer,integer,inte
ger,timestamp without time zone,text) line 3 at SQL statement at ch.ethz.inf.asl.cli
ent.ClientMessagingProtocolImpl.receiveResponse(Unknown Source) at ch.ethz.inf.asl.cli
ent.ClientMessagingProtocolImpl.sendMessage(Unknown Source) at ch.ethz.inf.asl.client.C
lientRunnable.sendMessage(Unknown Source) at ch.ethz.inf.asl.client.ClientRunnable.run(
Unknown Source) at java.lang.Thread.run(Thread.java:745) ubuntu@ip-172-31-14-163:~/l
ogs$
\end_layout

\begin_layout Standard
increased size of database
\end_layout

\begin_layout Section
Experimental Setup
\begin_inset CommandInset label
LatexCommand label
name "sec:experimentalsetup"

\end_inset


\end_layout

\begin_layout Subsubsection*
Setting up the Database
\end_layout

\begin_layout Standard
This is coolness!! SHOULD BE hre
\end_layout

\begin_layout Standard
Wha
\end_layout

\begin_layout Standard
experimentRunner (careful to have enough space for this instance 200GB just
 to be sure)
\end_layout

\begin_layout Standard
-> put key ssh-add pemas.pem for all the other instances 
\end_layout

\begin_layout Standard
-> create .pgpass file, install postgresql ?? is needed
\end_layout

\begin_layout Standard
-> git clone (install git)
\end_layout

\begin_layout Standard
install python pip
\end_layout

\begin_layout Standard
Install udo apt-get install libpq-dev and apt-get install python-dev because
 it's needed to udo pip install psycopg2
\end_layout

\begin_layout Standard
do sudo pip install pexpect
\end_layout

\begin_layout Standard
also 
\end_layout

\begin_layout Standard
also yoy have to disable ssh checking ..
 http://askubuntu.com/questions/87449/how-to-disable-strict-host-key-checking-in-
ssh
\end_layout

\begin_layout Standard
also do : You'll need to use eval `ssh-agent -s` to start the agent, ssh-add
 to enter your passphrase for your private key, and then ssh-agent -k to
 kill the agent when you're done.
 It even comes with a timeout, ssh-add -t <timeout>, where <timeout> can
 be something like Xh for X hours, Xm for X minutes, and so on.[NEVER stop
 the ssh-agent]
\end_layout

\begin_layout Standard
so the xperiments can run without the password being asked every time (http://st
ackoverflow.com/questions/17864306/how-to-make-git-not-ask-me-for-password-when-a
ccessing-remote-repositories)
\end_layout

\begin_layout Standard
Run experiments from there and go to sleep
\end_layout

\begin_layout Standard
Never more than one middleware per instance
\end_layout

\begin_layout Standard
The code related to experiments can be found in the 
\family typewriter
experiments/code
\family default
 directory.
 All the code related to the experiments was written in Python but there
 is a huge use of the underlying system commands through Python to achieve
 better performance.
 For example for calculating the number of lines of a file a 
\begin_inset Quotes eld
\end_inset

wc
\begin_inset Quotes erd
\end_inset

 command is called from within a Python program instead of opening and reading
 every single line of the file to count them up.
\end_layout

\begin_layout Standard
All the experiments were conducted in Amazon EC2.
 The following instances were used: ...
\end_layout

\begin_layout Standard
Initially we created an instance based on 
\begin_inset Quotes eld
\end_inset

Ubuntu Server 14.04 LTS (HVM), SSD Volume Type
\begin_inset Quotes erd
\end_inset

 Amazon Machine Image (AMI) and we installed the following:
\end_layout

\begin_layout Standard
openjdk-7 jdk
\end_layout

\begin_layout Standard
dstat
\end_layout

\begin_layout Standard
iperf
\end_layout

\begin_layout Standard
htop
\end_layout

\begin_layout Standard
We created an image of our created instance to be used for the generation
 of future instances.
 The created image can be used to create instances for clients and middlewares.
\end_layout

\begin_layout Standard
We created a general security group to be used by all instances that allowed
 everybody to pass by.
\end_layout

\begin_layout Standard
Similarly we installed in another instance PostgreSQL, dstat ...
 to be used for databases and we created an image of it.
 For the database the following things need to also be changed (Configuration
 file allowing outside hosts ...) 
\end_layout

\begin_layout Standard
After doing so we had the instances ready for the experiments.
 
\end_layout

\begin_layout Standard
In order to retrieve the IPs of the instances we used boto
\begin_inset Foot
status open

\begin_layout Plain Layout
https://github.com/boto/boto
\end_layout

\end_inset

.
 By naming the instances with 
\begin_inset Quotes eld
\end_inset

client
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

middleware
\begin_inset Quotes erd
\end_inset

 or 
\begin_inset Quotes eld
\end_inset

database
\begin_inset Quotes erd
\end_inset

 
\end_layout

\begin_layout Standard
The three most important classes needed for the experiments are the 
\shape italic
Client
\shape default
, the 
\shape italic
Middleware
\shape default
 and the 
\shape italic
Database
\shape default
 class.
 Let us see each one of them.
\end_layout

\begin_layout Itemize
Client: contains
\end_layout

\begin_layout Standard
about properties files (maybe) : 
\end_layout

\begin_layout Standard
Sunday(19/10/2014) ------------------ By changing the executable to read
 configuration files instead of the command line arguments I solved the
 `$` problem in the password and also I can chaange the configuration files
 without having to really change the deployment scripts!!
\end_layout

\begin_layout Standard
bash was used too much for exmaple to remove warm up and cool down phase,
 awk, sed, grep were used
\end_layout

\begin_layout Standard
command = "awk -F'
\backslash
t' '$1 >= " + str(warmUpInSeconds * 1000) + " && $1 <= " + 
\backslash
 str(lastTimeInMilliseconds - coolDownInSeconds * 1000) + " { print; }'
 " + specificFile
\end_layout

\begin_layout Standard
Python seemed more appropiate for combining bash commands bla blah
\end_layout

\begin_layout Standard
Talk about pexpect and how awesome it is!
\end_layout

\begin_layout Subsection*
EC2 Instances
\end_layout

\begin_layout Standard
Do the following http://superuser.com/questions/331167/why-cant-i-ssh-copy-id-to-
an-ec2-instance ssh-add privatekye file to login to the ec2 instances without
 having to do `ssh -i ~/...
 ` every time!! AWESOME!! 
\end_layout

\begin_layout Subsection*
Deploying the System for Experiments
\end_layout

\begin_layout Standard
Explaing about Python boto ..
 gnuplot and all the other packages ...
 most of the time used UNIX native commands to have much faster times of
 whaterver ...
 for example for reading CSV files, cutting parts of files and so on
\end_layout

\begin_layout Section
Experiments
\begin_inset CommandInset label
LatexCommand label
name "sec:experiments"

\end_inset


\end_layout

\begin_layout Standard
All successfull receiveals bla blah
\end_layout

\begin_layout Standard
--------------- In the report mention that in the throughput all the requests
 were successful, I had no failed responses.
\end_layout

\begin_layout Subsection*
Stability
\end_layout

\begin_layout Standard
Clients and MW was t2.small and db t2.medium.
\end_layout

\begin_layout Standard
As can be seen in Figure ...
 Used getTrace method from ResultsReader.py to extract the data.
 Response time was averaged over the interval of one minute.
 While throughput was calculated per second and averaged over the interval
 of one minute.
 I.e.
 In minute i corresponds to the averaged time from (i - 1, i].
 The data were generated using the getTrace from ResultReader
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename trace1Hour/responseTime/responseTime.eps
	scale 130

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename trace1Hour/throughput/throughput.eps
	scale 128

\end_inset


\end_layout

\begin_layout Plain Layout
\align center
\begin_inset Caption Standard

\begin_layout Plain Layout
Response time and throughput of an one hour trace with 2 client instances
 (50 clients/instance) and 1 middleware instance (20 threads, 20 connections)
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Let's see where time was spent 
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
adfs
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
dsafasdf
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CONNECTION: 0.000689706, 0.216034
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
REQUEST: 3.23399, 2.38918
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
IN WORKER THREAD QUEUE: 13.3207, 4.17608
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TIMES A SOCKET IS WORKED for a REQUEST TO BE READ: 1, 0
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
TIMES TO ENTER: 1.00164, 0.163046 TIMES (NOTHING) INSIDE: 0.0201363, 0.570286
 TIMES (DOING) INSIDE: 3.33539, 2.51786
\end_layout

\begin_layout Standard
Averages and SD
\end_layout

\begin_layout Standard
25 17.10725 5.51819 RECEIVE MESSAGE
\end_layout

\begin_layout Standard
25 17.1355 5.543025 SEND MESSAGE
\end_layout

\begin_layout Standard
25 15.7621 4.689385 LIST QUEUES
\end_layout

\begin_layout Standard
16.668 average response time in total Gia ola ta requests
\end_layout

\begin_layout Standard
Talk about list queues(Since this was the trace and we just wanted to verify
 that our system is stable when it is being executed for a fair amount of
 time we did not really do any assumptions about the results.
 There are some things that actually can be asily explained, the time to
 receive a connection is technically 0, this is because we have the same
 amount of worker threads to connections.
 The time waiting for a worker thread is quite high and was to be expected
 since we have 100 clients and only 20 workwer threads.
 So at any point in time 80 clients connections could possilby be waiting.
 Network time is also really low and this makes sense since the throughput
 between two instances is (iperf).
 List queues check db time and why they are faster, not doing so much with
 the database ...
 verify this by checking request time for all types of requests.
\end_layout

\begin_layout Standard
DB REQUEST per type of request
\end_layout

\begin_layout Standard
grep "DB REQUEST
\backslash
tLIST_QUEUES" middlewareInstance1/m*.csv | awk -F'
\backslash
t' '{ sum += $2; n++; } END { if (n > 0) printf sum /n }' 2.38218
\end_layout

\begin_layout Standard
grep "DB REQUEST
\backslash
tSEND_MESSAGE" middlewareInstance1/m*.csv | awk -F'
\backslash
t' '{ sum += $2; n++; } END { if (n > 0) printf sum /n }' 3.71801
\end_layout

\begin_layout Standard
grep "DB REQUEST
\backslash
tRECEIVE_MESSAGE" middlewareInstance1/m*.csv | awk -F'
\backslash
t' '{ sum += $2; n++; } END { if (n > 0) printf sum /n }' 3.60231
\end_layout

\begin_layout Standard
TIME WISE (for all request ...
 < 50ms are 99.7% of the requests 
\end_layout

\begin_layout Standard
< 50 0.997697
\end_layout

\begin_layout Standard
< 25 0.97127
\end_layout

\begin_layout Standard
< 20 0.869102
\end_layout

\begin_layout Standard
< 23 0.952159
\end_layout

\begin_layout Standard
< 22 0.9357
\end_layout

\begin_layout Subsubsection*
Warm Up and Cool Down
\end_layout

\begin_layout Standard
REmoved 2 minutes from the beginning and one minute from the end in all
 of the following experimental results.
 As we saw from the trace ...
 This was done by using sed.
\end_layout

\begin_layout Subsection*
2^2 (arxise me auto TODO allios den me vlepo kala)
\end_layout

\begin_layout Standard
2k was done with something like the following
\end_layout

\begin_layout Standard
{"nameOfTheExperiment": " ",
\end_layout

\begin_layout Standard
"numberOfClientInstances": 1, "numberOfMiddlewareInstances": 1,
\end_layout

\begin_layout Standard
"databaseUsername": "ubuntu", "databasePassword": "mepas$1$2$3$", "databaseName"
: "mepas", "databasePortNumber": 5432,
\end_layout

\begin_layout Standard
"middlewarePortNumber": 6789,
\end_layout

\begin_layout Standard
"runningTimeInSeconds": 600,
\end_layout

\begin_layout Standard
"threadPoolSize": 20, "connectionPoolSize": 20,
\end_layout

\begin_layout Standard
"totalClients": 50, "totalQueues": 50,
\end_layout

\begin_layout Standard
# mapping between client instances and middleware instances # e.g.
 if (a, b) is in mapping it means that client[a] returned by # getClientsIPs()
 is going to connect to middleware[b] where b is # returned by middlewareIPs
 "mappings": [(0, 0)], #, (1, 0)], # (2, 1), (3, 1)], "clientsData": [(50,
 1)], #, (50, 51)], # (25, 51), (25, 76)],
\end_layout

\begin_layout Standard
"username": "ubuntu" } 
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="5">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
# threads 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
#connections
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
mw instance
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
db instances
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
throughput 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.small
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.medium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4191
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.small
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.medium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4135
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.small
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.medium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4122
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.small
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.medium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5450
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Now we define two variablex X_a and _X_b as follows
\end_layout

\begin_layout Standard
X_A = {-1 if 10 threads, 1 if 20 threads}
\end_layout

\begin_layout Standard
X_B = {-1 if 10 connections, 1 if 10 connections}
\end_layout

\begin_layout Standard
y = q_0 + q_Ax_A + q_Bx_B + qABX_AX_B
\end_layout

\begin_layout Standard
you create the equations: qo = 4474 requests (mean performance)
\end_layout

\begin_layout Standard
the effect of threads is 318.
 The effect of connection is 311
\end_layout

\begin_layout Standard
while the interaction between thread and connections is 345 requests /sec
\end_layout

\begin_layout Standard
The 
\end_layout

\begin_layout Subsection*
2
\begin_inset script superscript

\begin_layout Plain Layout
k(=?TODO)
\end_layout

\end_inset

 Experiment
\end_layout

\begin_layout Standard
Before starting I would like to talk about love the one and only one.
\end_layout

\begin_layout Standard
Factors
\end_layout

\begin_layout Standard
number of middleware threads
\end_layout

\begin_layout Standard
number of connections
\end_layout

\begin_layout Standard
instance type of middleware
\end_layout

\begin_layout Standard
instance type of database
\end_layout

\begin_layout Standard
dfs
\end_layout

\begin_layout Standard
16 experiments in total for 10 minutes each
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="17" columns="5">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
#threads
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
#connections
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MW instance type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
DB instance type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
throughput (requests/sec)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.small
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
m3.xlarge
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3549
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.small
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
m3.xlarge
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3508
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.small
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
m3.xlarge
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
3379
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.small
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
m3.xlarge
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5615
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.medium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
m3.xlarge
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4585
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.medium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
m3.xlarge
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4464
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.medium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
m3.xlarge
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4567
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.medium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
m3.xlarge
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
6133
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.small
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.medium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4191
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.small
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.medium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4135
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.small
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.medium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4122
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.small
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.medium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5450
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.medium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.medium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4167
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.medium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.medium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4099
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
10
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.medium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.medium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4212
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
20
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.medium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
t2.medium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5448
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Different througput values based on the number of threads, number of connections
, middleware and database instance type
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection*
Increasing the Message Size
\end_layout

\begin_layout Standard
2014-11-05 21:29:30 UTC HINT: Consider increasing the configuration parameter
 "checkpoint_segments".
 2014-11-05 21:29:32 UTC LOG: checkpoints are occurring too frequently (2
 seconds apart) 2014-11-05 21:29:32 UTC HINT: Consider increasing the configurat
ion parameter "checkpoint_segments".
 (in the 40000 characters per message)
\end_layout

\begin_layout Standard
DISABLE CONSTRAINT ...
 
\end_layout

\begin_layout Subsection*
Increasing the Number of Clients
\end_layout

\begin_layout Subsection*
Encountered Problems
\end_layout

\begin_layout Standard
After running the 2
\begin_inset script superscript

\begin_layout Plain Layout
k
\end_layout

\end_inset

 experiment we immediately noticed that when using the m3.xlarge instance
 type for the database the system as a whole was slower, i.e.
 had less throuput than when having a database of t2.medium instance type.
 It was expected to generally have less throughput for the clients than
 what we had when we executed the trace since now we have half the clients.
 The results of the above experiments were somehow unexpected.
 Why is throughput decreased when changing the database instance type form
 t2.medium to m3.xlarge in all the experiments except te ones where the number
 of threads and connection is 20? It was excepted that by just changing
 one component of the system with a better one, the system as a whole would
 become better but throughput instead decreases.
 And also why is it that with the number of threads and connections being
 20 the throughput is better when using a better instance type for the database?
 A guess for this would be that by having 20 database connections and 20
 threads, all of the database connections can be utilized and since the
 database can respond faster the system can become faster.
 But then why isn't it faster when having 10 threads and 10 connections?
\end_layout

\begin_layout Standard
In order to find out what was going on we decided to have a better look
 on the differences between the experiment 1 (10 threads, 10 connections,
 MW t2.small and db m3.xlarge) and experiment 9 (10 threads, 10 connections,
 MW t2.small and db t2.medium).
 On average a request on the t2.medium database took 2.28ms while on the m3.xlarge
 took on average 2.73ms.
 Waiting time for a worker thread was 11.09ms for experiment 1 and 9.15ms
 for experiment 2.
 The differences in the waiting time can be explained since a request is
 slower in the first system, worker threads need more time working on a
 request and therefore it takes a bit more time to get a worker thread.
 In order to see what exactly is going on I decided to run again those two
 experiments and .
 Pgbench shows that m3.xlarge is faster.
 I want to kill myself right now ..
 FUCKING shit ...
 apparently there was 
\end_layout

\begin_layout Standard
This was counterintuitive.
 By checking the time the system took in every component we show that the
 difference was on the database.
 By running pbench we saw that actually m3.xlarge had better throughput than
 t2.medium instance so we assumed the problem was in the newotrk.
 Although all our instances were running in the Oregon region (US West)
 we realized afterwards that in every region there are isolated locations,
 known as availability zones
\begin_inset Foot
status open

\begin_layout Plain Layout
http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.
html
\end_layout

\end_inset

 and apparently the m3.xlarge instance was in another zone.
 We had to rerun 8 of the 16 experiments and as could be show now they make
 sense.
\end_layout

\begin_layout Standard
-----
\end_layout

\begin_layout Standard
During the initial testing phase of the system it happened to notice some
 really high response time, in the magnitude of hundreds milliseconds.
 By follow up search it came to our conclusion that some database requests
 were extremely slow.
 After realizing that we checked the PostgreSQL log files were we found:
\end_layout

\begin_layout Standard
2014-11-03 20:47:49 UTC LOG: checkpoints are occurring too frequently (26
 seconds apart) 2014-11-03 20:47:49 UTC HINT: Consider increasing the configurat
ion parameter "checkpoint_segments".
\end_layout

\begin_layout Standard
After reading about checkpoints we realized ...
 so we increased the number of checkpoint_segments to 10 and this problem
 never occured again.
 We checked after every experiment ?? TODO
\end_layout

\begin_layout Section
Conclusion
\begin_inset CommandInset label
LatexCommand label
name "sec:conclusion"

\end_inset


\end_layout

\begin_layout Standard
This is a lovely conclusion for a lovely world that used to exist but is
 no more.
\end_layout

\end_body
\end_document
